<?php

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Routing\RouteMatchInterface;

include('ParselyMetadata.php');
include('section.inc');

/**
 * Implements hook_page_attachments().
 */

/**
 * Implements hook_page_attachments().
 */
function parsely_page_attachments(array &$attachments)
{
    $apikey = \Drupal::config('parsely.settings')->get('parsely_apikey');
    $node = \Drupal::routeMatch()->getParameter('node');
    $route = \Drupal::routeMatch()->getRouteObject();
    $backend_page = is_backend_page($route);
    if (!$apikey || !$node || $backend_page) {

    }

    else {
		$parsely_span = '<span id="parsely-cfg" data-parsely-site="'.$apikey.'"></span>';

		$parsely_metadata = new \Drupal\parsely\ParselyMetadata($node);
		$parsely_metas = [
			'@context' => 'schema.org',
			'@type' => $parsely_metadata->getSchemaType(),
			'author' => $parsely_metadata->getCreator(),
			'url' => $parsely_metadata->getURL($node),
			'section' => $parsely_metadata->getSection(),
			'keywords' => $parsely_metadata->getTags(),
			'datePublished' => $parsely_metadata->getDate(),
			'headline' => $parsely_metadata->getHeadline(),
			'thumbnailUrl' => $parsely_metadata->getThumbnail()
		];

		$parsely_tag = [
			'#type' => 'html_tag',
			'#tag' => 'script',
			'#attributes' => [
				'type' => 'application/ld+json'
			],
			'#value' => new \Drupal\parsely\Component\Render\ParselyRenderer(json_encode($parsely_metas))
		];

		$attachments['#attached']['html_head'][] = [
			[
				'#type' => 'html_tag',
				'#tag' => 'div',
				'#attributes' => [
					'id' => 'parsely-root',
					'style' => 'display: none'
				],
				'#value' => $parsely_span
			], 'div_tag'
		];

		$attachments['#attached']['html_head'][] = [
			[$parsely_tag, 'parsely_tag'],
		];

		$attachments['#attached']['library'][] = 'parsely/parsely-include';
		$attachments['#attached']['drupalSettings']['parsely']['parsely-include']['apikey'] = $apikey;
	}

}

/**
 * Checks to see if page is an admin page / node edit page (draft page)
 * @param $route \Symfony\Component\Routing\Route
 * @return boolean
 */
function is_backend_page($route) {
	$is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);
	$is_edit_page = \Drupal::RouteMatch()->getRouteName() == 'entity.node.edit_form';
	return ($is_admin || $is_edit_page);
}