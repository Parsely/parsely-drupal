<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\parsely\ParselyMetadata;

include('ParselyMetadata.php');
include('section.inc');
/**
 * Implements hook_help().
 */
function parsely_help($route_name, RouteMatchInterface $route_match) {
    switch ($route_name) {
        case 'help.page.parsely':
            return t('
        <h2>Lorem ipsum generator for Drupal.</h2>
        <h3>Instructions</h3>
        <p>Lorem ipsum dolor sit amet... <strong>Just kidding!</strong></p>
        <p>Unpack in the <em>modules</em> folder (currently in the root of your Drupal 8 installation) and enable in <strong>/admin/modules</strong>.</p>
        <p>Then, visit <strong>/admin/config/development/loremipsum</strong> and enter your own set of phrases to build random-generated text (or go with the default Lorem ipsum).</p>
        <p>Last, visit <strong>www.example.com/loremipsum/generate/P/S</strong> where:</p>
        <ul>
          <li><em>P</em> is the number of <em>paragraphs</em></li>
          <li><em>S</em> is the maximum number of <em>sentences</em></li>
        </ul>
        <p>There is also a generator block in which you can choose how many paragraphs and
phrases and it\'ll do the rest.</p>
        <p>If you need, there\'s also a specific <em>generate lorem ipsum</em> permission.</p>
        <h3>Attention</h3>
        <p>Most bugs have been ironed out, holes covered, features added. But this module is a work in progress. Please report bugs and suggestions, ok?</p>
      ');
    }
}

/**
 * Implements hook_page_bottom().
 */
function parsely_page_bottom(array &$page_bottom)
{
    // TODO: if we're not supposed to track, get outta here
    $apikey = \Drupal::config('parsely.settings')->get('parsely_apikey');
    $markup = <<<EOT

<!-- START Parse.ly Include: Standard -->
<div id="parsely-root" style="display: none">
  <div id="parsely-cfg" data-parsely-site="$apikey"></div>
</div>
<script>
(function(s, p, d) {
  var h=d.location.protocol, i=p+"-"+s,
    e=d.getElementById(i), r=d.getElementById(p+"-root"),
    u=h==="https:"?"d1z2jf7jlzjs58.cloudfront.net"
    :"static."+p+".com";
  if (e) return;
  e = d.createElement(s); e.id = i; e.async = true;
  e.src = h+"//"+u+"/p.js"; r.appendChild(e);
})("script", "parsely", document);
</script>
<!-- END Parse.ly Include: Standard -->
EOT;
    $page['page_bottom']['parsely'] = array('#markup' => $markup);
}

/**
 * Implements hook_page_attachments().
 */
function parsely_page_attachments(array &$attachments)
{
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node) {    $parsely_metadata = new ParselyMetadata($node);
        $parsely_metas = [
            '@context' => 'schema.org',
            '@type' => 'NewsArticle',
            'author' => $parsely_metadata->getCreator(),
            'url' => $parsely_metadata->getURL($node),
            'section' => $parsely_metadata->getSection(),
            'keywords' => $parsely_metadata->getTags(),
            'datePublished' => $parsely_metadata->getDate(),
        ];
        $parsely_tag = [
            '#tag' => 'script',
            '#attributes' => [
                'type' => 'application/ld+json'
            ],
            '#value' => json_encode($parsely_metas)
        ];}

}

